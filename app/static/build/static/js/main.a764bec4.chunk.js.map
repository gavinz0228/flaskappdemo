{"version":3,"sources":["components/FileUploadItem.js","api/BaseApi.js","api/FileUploadApi.js","api/DataApi.js","components/FileUploadPanel.js","api/StatsApi.js","components/Dashboard.js","components/DataTypeListItem.js","components/DataManager.js","components/UploadInfoItem.js","components/UploadTaskItem.js","components/LogViewer.js","components/Admin.js","api/AuthApi.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["FileUploadItem","props","console","log","state","fileInfo","uploadPercentage","this","setState","style","backgroundColor","marginTop","name","React","Component","BaseApi","BASE_API_URL","FileUploadApi","taskId","file","progressChangeCallback","formData","FormData","append","axios","post","headers","onUploadProgress","get","deviceId","deviceType","fileNum","technicianId","DataApi","text","encodeURI","FileUploadPanel","uploadDescription","filesChosen","allDataTypeInfo","seletedDataTypeInfo","uploadButton","createRef","onDragOver","bind","onDrop","onFileChange","onUpload","onUploadProgressChange","onDataTypeSelected","getAllDataTypes","then","res","data","length","alert","createUploadTask","currTaskId","forEach","f","a","uploadFile","numLeft","status","event","element","target","files","selectedFile","progressEvent","preventDefault","allFiles","dataTransfer","items","i","kind","getAsFile","push","e","targetKey","getAttribute","seletedTypeInfo","filter","dt","dataTypeId","map","key","selectedTypeText","dataTypeName","dataTypeSelections","Dropdown","Item","dtid","Container","Row","Col","Jumbotron","minHeight","as","ButtonGroup","onClick","Button","variant","Toggle","split","id","Menu","ref","StatsApi","Dashboard","uploadStatsByDate","labels","datasets","errorStatsByDeviceTypes","uploadStatsChart","getUploadStatsByDate","catch","error","getErrorStatsByDeviceTypes","Alert","height","md","span","ListGroup","DataTypeListItem","dataTypeInfo","addCallBack","onAdd","deviceBrand","dataType","DataManager","deviceSearchText","selectedDataTypeInfo","onSearchTextChange","addTypeCallBack","filterSelectedDataTypes","value","searchDataTypes","dataTypes","seletedTypeIdSet","Set","has","addedTypeInfo","newDataTypeInfoState","dataTypeList","d","Badge","Form","Control","size","type","placeholder","onChange","Table","striped","bordered","hover","Group","controlId","Label","column","sm","UploadInfoItem","uploadInfo","className","uploadId","archivePath","uploadError","UploadTaskItem","uploadTask","LogViewer","uploadTasks","getAllUploadTasks","err","ut","Nav","defaultActiveKey","Link","eventKey","textAlign","Admin","Navbar","bg","expand","Brand","aria-controls","Collapse","to","inline","NavDropdown","title","href","Divider","paddingTop","from","exact","path","component","AuthApi","userName","password","sha1","Login","loginSuccess","sessionToken","login","loginToken","width","margin","top","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a764bec4.chunk.js","sourcesContent":["import React from 'react';\r\nexport class FileUploadItem extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props);\r\n        this.state={\r\n            fileInfo: null,\r\n            uploadPercentage: 0\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.setState(\r\n            {\r\n                fileInfo: this.props.fileInfo,\r\n                uploadPercentage: this.props.uploadPercentage\r\n            }\r\n        );\r\n    }\r\n    render(){\r\n        if(!this.state.fileInfo)\r\n            return (<div></div>)\r\n        return (\r\n            <div style={{backgroundColor:\"white\", marginTop: 5}}>\r\n                {this.state.fileInfo.name}\r\n            </div>\r\n        );\r\n    }\r\n}","export class BaseApi{\r\n    static BASE_API_URL = \"/\"\r\n}","import {BaseApi} from './BaseApi'\r\nimport axios from 'axios'\r\n\r\nexport class FileUploadApi extends BaseApi{\r\n    static uploadFile(taskId, file, progressChangeCallback){\r\n\r\n        let formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        return axios.post(\r\n            FileUploadApi.BASE_API_URL + 'upload/perform_task/'+ taskId,\r\n            formData,\r\n            {\r\n                headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n                },\r\n                onUploadProgress: progressChangeCallback\r\n            }\r\n        );\r\n    }\r\n    static getUploadStats(){\r\n        return axios.get(FileUploadApi.BASE_API_URL + 'upload/successful_upload_stats');\r\n    }\r\n    static getAllUploadTasks(){\r\n        return axios.get(FileUploadApi.BASE_API_URL + 'upload/tasks');\r\n    }\r\n    static createUploadTask(deviceId, deviceType, fileNum, technicianId){\r\n        return axios.post(FileUploadApi.BASE_API_URL + 'upload/tasks', \r\n        {\r\n            \"deviceId\" : deviceId,\r\n            \"deviceType\" : deviceType,\r\n            \"fileNum\" : fileNum,\r\n            \"manualUploader\": technicianId\r\n        },\r\n        {\r\n            headers: {'Access-Control-Allow-Origin': '*'}\r\n        });\r\n    }\r\n}","import {BaseApi} from './BaseApi'\r\nimport axios from 'axios'\r\n\r\nexport class DataApi extends BaseApi{\r\n    static getAllDataTypes(){\r\n        return axios.get(DataApi.BASE_API_URL + 'data/data_types/');\r\n    }\r\n    static searchDataTypes(text){\r\n        return axios.get(DataApi.BASE_API_URL+ 'data/data_types/search/'+ encodeURI(text))\r\n    }\r\n}","import React from 'react';\r\nimport {Button, Container, Row, Col, Jumbotron, Dropdown, ButtonGroup} from 'react-bootstrap'\r\nimport  {FileUploadItem} from './FileUploadItem'\r\nimport {FileUploadApi} from '../api/FileUploadApi'\r\nimport {DataApi} from '../api/DataApi'\r\nexport class FileUploadPanel extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            uploadPercentage:0,\r\n            uploadDescription: \"\",\r\n            filesChosen:[],\r\n            allDataTypeInfo:[],\r\n            seletedDataTypeInfo:null\r\n        }\r\n        this.uploadButton = React.createRef()\r\n        this.onDragOver = this.onDragOver.bind(this);\r\n        this.onDrop = this.onDrop.bind(this);\r\n        this.onFileChange = this.onFileChange.bind(this);\r\n        this.onUpload = this.onUpload.bind(this);\r\n        this.onUploadProgressChange = this.onUploadProgressChange.bind(this);\r\n        this.onDataTypeSelected = this.onDataTypeSelected.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        DataApi.getAllDataTypes().then(res=>{\r\n            this.setState({allDataTypeInfo: res.data.data})\r\n        })\r\n    }\r\n    async onUpload(){\r\n        if (this.state.filesChosen.length == 0)\r\n        {\r\n            alert(\"Please select a file before uploading\");\r\n            return;\r\n        }\r\n        const res = await FileUploadApi.createUploadTask(\"test computer\", \"computer\", this.state.filesChosen.length, \"Technician1\");\r\n        console.log(res)\r\n        const currTaskId =  res.data.data.taskId;\r\n\r\n        const componentThis = this;\r\n        //this.uploadButton.current.disabled = true;\r\n        this.setState({uploadPercentage:0});\r\n\r\n        this.state.filesChosen.forEach(async (f) =>{\r\n            try{\r\n                const res = await FileUploadApi.uploadFile(currTaskId, f, this.onUploadProgressChange)\r\n                alert(res.data.data.numLeft+\" file(s) left. status:\"+ res.data.data.status);\r\n                console.log(res.data.data);\r\n            }\r\n            catch(ex)\r\n            {\r\n                alert(ex);\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    onFileChange(event){\r\n        const element = event.target;\r\n        if(element.files.length > 0)\r\n        {\r\n            this.setState({selectedFile: element.files[0]});\r\n        }\r\n    }\r\n    onUploadProgressChange(progressEvent){\r\n        /*\r\n        let percentage = parseInt(progressEvent.loaded / this.state.selectedFile.size * 100)\r\n        this.setState({uploadPercentage: percentage});\r\n        this.setState({uploadDescription: percentage + \"%\"})\r\n        console.log(progressEvent.loaded , this.state.selectedFile.size, this.state.uploadPercentage);\r\n        */\r\n    }\r\n    onDragOver(event)\r\n    {\r\n        //console.log(event);\r\n        event.preventDefault()\r\n    }\r\n    onDrop(event){\r\n        event.preventDefault();\r\n        let allFiles = []\r\n        if (event.dataTransfer.items) {\r\n            for (var i = 0; i < event.dataTransfer.items.length; i++) {\r\n\r\n              if (event.dataTransfer.items[i].kind === 'file') {\r\n                var file = event.dataTransfer.items[i].getAsFile();\r\n                allFiles.push(file);\r\n              }\r\n            }\r\n          }\r\n          this.setState(\r\n            {\r\n                filesChosen: [...this.state.filesChosen, ...allFiles]\r\n            }\r\n        );\r\n    }\r\n    onDataTypeSelected(e){\r\n        const targetKey = e.target.getAttribute(\"dtid\");\r\n        if(targetKey)\r\n        {\r\n            const seletedTypeInfo = this.state.allDataTypeInfo.filter(dt => dt.dataTypeId == targetKey);\r\n            this.setState({seletedDataTypeInfo: seletedTypeInfo[0]});\r\n        }\r\n\r\n    }\r\n    render(){\r\n        const fileInfo = this.state.filesChosen.map((file)=>{\r\n            return (<FileUploadItem fileInfo={file} key={file.name}/>)\r\n        });\r\n        \r\n        const selectedTypeText = this.state.seletedDataTypeInfo==null? \"Please Select a Data Type\": this.state.seletedDataTypeInfo.dataTypeName;\r\n        console.log(this.state.seletedDataTypeInfo);\r\n        const dataTypeSelections = this.state.allDataTypeInfo.map(dt =><Dropdown.Item key={dt.dataTypeId} dtid={dt.dataTypeId}>{dt.dataTypeName}</Dropdown.Item> );\r\n        return (\r\n            <Container >\r\n                <Row>\r\n                    <Col >\r\n                        <Jumbotron \r\n                            onDrop= {this.onDrop}\r\n                            onDragOver = {this.onDragOver}\r\n                            style = {{minHeight: 200}} >\r\n                        <span><b>Please drag one or more files to this area</b></span>\r\n                        {fileInfo}\r\n                        </Jumbotron>\r\n                        \r\n                        {this.state.filesChosen.length} File(s) selected\r\n                        <br/>\r\n\r\n                        {/* <input type=\"file\" name=\"fileUpload\" onChange={this.onFileChange} /> */}\r\n                        {/*<ProgressBar animated now={this.state.uploadPercentage} label={this.state.uploadDescription}/>*/}\r\n\r\n                        <Dropdown \r\n                            as={ButtonGroup}\r\n                            onClick={this.onDataTypeSelected}\r\n                            >\r\n                            <Button variant=\"success\">{selectedTypeText}</Button>\r\n\r\n                            <Dropdown.Toggle split variant=\"success\" id=\"dropdown-split-basic\" />\r\n                            <Dropdown.Menu>\r\n                                {dataTypeSelections}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <br/>\r\n                        <br/>\r\n                        <Button ref={this.uploadButton} onClick={this.onUpload}>Upload</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            );\r\n  }\r\n}\r\n\r\n","import {BaseApi} from './BaseApi'\r\nimport axios from 'axios'\r\n\r\nexport class StatsApi extends BaseApi{\r\n    static getUploadStatsByDate(){\r\n        return axios.get(StatsApi.BASE_API_URL + 'stats/upload_stats_by_date');\r\n    }\r\n    static getErrorStatsByDeviceTypes(){\r\n        return axios.get(StatsApi.BASE_API_URL + 'stats/error_stats_by_device_types');\r\n    }\r\n}","import React from 'react';\r\nimport { Container, Row, Col, ListGroup, Alert} from 'react-bootstrap'\r\nimport {Line, Pie} from 'react-chartjs-2'\r\nimport {StatsApi} from '../api/StatsApi'\r\nexport class Dashboard extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            uploadStatsByDate:{labels:[], datasets:[{data:[]}] },\r\n            errorStatsByDeviceTypes:{labels:[], datasets:[{data:[]}] }\r\n        }\r\n        this.uploadStatsChart = React.createRef(); \r\n    }\r\n    componentDidMount(){\r\n        StatsApi.getUploadStatsByDate()\r\n            .then(res=>{\r\n                this.setState({uploadStatsByDate: res.data.data})\r\n                console.log(this.state.uploadStatsByDate);\r\n            })\r\n            .catch(error=>{console.log(error)});\r\n\r\n        StatsApi.getErrorStatsByDeviceTypes()\r\n            .then(res=>{\r\n                this.setState({errorStatsByDeviceTypes: res.data.data})\r\n                console.log(this.state.errorStatsByDeviceTypes);\r\n            })\r\n            .catch(error=>{console.log(error)});\r\n    }\r\n    render(){\r\n        return (\r\n\r\n            <Container>\r\n                <Row>\r\n                <Alert variant=\"primary\">\r\n                        10 files are awaiting to be processed at this moment.\r\n                    </Alert>\r\n                </Row>\r\n                <Row>\r\n                    <Line height={100} data = {this.state.uploadStatsByDate} />\r\n                </Row>\r\n                <Row>\r\n\r\n                </Row>\r\n                <Row>\r\n                    \r\n                    <Col md={{span:6}}>\r\n                        <Container><h3>Current Unresolved Errors</h3></Container>\r\n                        <ListGroup>\r\n                            <ListGroup.Item>Upload Errors: 0</ListGroup.Item>\r\n                            <ListGroup.Item>Processing Errors: 0</ListGroup.Item>\r\n                            <ListGroup.Item>Data Storage Errors: 0</ListGroup.Item>\r\n                            <ListGroup.Item>Application Errors: 0</ListGroup.Item>\r\n                            <ListGroup.Item>Unknown Application Errors: 0</ListGroup.Item>\r\n                        </ListGroup>\r\n\r\n                    </Col>\r\n                    <Col md={{span:6}}>\r\n                        <Container><h3>Upload by Device Types</h3></Container>\r\n                        <Pie data = {this.state.errorStatsByDeviceTypes} />\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport {Button} from 'react-bootstrap'\r\nexport class DataTypeListItem extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {dataTypeInfo:props.dataTypeInfo}\r\n        this.addCallBack = this.props.addCallBack\r\n        this.onAdd = this.onAdd.bind(this);\r\n    }\r\n    onAdd(){\r\n        this.addCallBack(this.state.dataTypeInfo);\r\n    }\r\n    render(){\r\n        return (\r\n            <tr>\r\n                <td>{this.state.dataTypeInfo.dataTypeId}</td>\r\n                <td>{this.state.dataTypeInfo.dataTypeName}</td>\r\n                <td>{this.state.dataTypeInfo.deviceBrand}</td>\r\n                <td>{this.state.dataTypeInfo.deviceType}</td>\r\n                <td>{this.state.dataTypeInfo.dataType}</td>\r\n                <td><Button onClick={this.onAdd}> Add </Button></td>\r\n            </tr>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport {Container, Badge, Row,Col, Form, Table, Button, Jumbotron } from 'react-bootstrap';\r\nimport {DataTypeListItem} from './DataTypeListItem'\r\nimport {DataApi} from '../api/DataApi'\r\nexport class DataManager extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            dataTypeInfo: [],\r\n            deviceSearchText:\"\",\r\n            selectedDataTypeInfo:[]\r\n        }\r\n        this.onSearchTextChange = this.onSearchTextChange.bind(this);\r\n        this.addTypeCallBack = this.addTypeCallBack.bind(this);\r\n        this.filterSelectedDataTypes = this.filterSelectedDataTypes.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        DataApi.getAllDataTypes()\r\n            .then(res=>{\r\n                this.setState({dataTypeInfo: this.filterSelectedDataTypes(res.data.data)})\r\n            })\r\n    }\r\n    onSearchTextChange(e){\r\n        this.setState({deviceSearchText: e.target.value},()=>{\r\n            DataApi.searchDataTypes(this.state.deviceSearchText)\r\n                .then(res=>{\r\n                    this.setState({dataTypeInfo: this.filterSelectedDataTypes(res.data.data) })\r\n                })\r\n        })\r\n    }\r\n    filterSelectedDataTypes(dataTypes){\r\n        const seletedTypeIdSet = new Set(this.state.selectedDataTypeInfo.map(dt=> dt.dataTypeId))\r\n        return dataTypes.filter(dt=> !seletedTypeIdSet.has(dt.dataTypeId));\r\n    }\r\n    addTypeCallBack(addedTypeInfo){\r\n        console.log(addedTypeInfo);\r\n\r\n        const newDataTypeInfoState = this.state.dataTypeInfo.filter(dt => dt.dataTypeId !== addedTypeInfo.dataTypeId);\r\n        this.setState({dataTypeInfo: newDataTypeInfoState}, \r\n            this.setState({selectedDataTypeInfo:[ ...this.state.selectedDataTypeInfo, addedTypeInfo]})\r\n        );\r\n        \r\n    }\r\n    render(){\r\n        const dataTypeList = this.state.dataTypeInfo.map(d =>{\r\n            return (\r\n                <DataTypeListItem dataTypeInfo ={d} addCallBack = {this.addTypeCallBack} key={d.dataTypeId}/>\r\n            )\r\n        });\r\n        const selectedDataTypeInfo = this.state.selectedDataTypeInfo.map(dt=><Badge variant=\"primary\" key={dt.dataTypeId}>{dt.dataTypeName}</Badge>);\r\n        return (\r\n            <Container>   \r\n                <Row>\r\n                    <Form.Control \r\n                        size=\"lg\" \r\n                        type=\"text\" \r\n                        placeholder=\"Search devices type, data type, brand name, device name here\" \r\n                        value={this.state.deviceSearchText} \r\n                        onChange={this.onSearchTextChange}/>\r\n                </Row>\r\n                <Row>\r\n                    \r\n                    <Table striped bordered hover style={{marginTop: 20}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Device Name</th>\r\n                                <th>Device Brand</th>\r\n                                <th>Device Type</th>\r\n                                <th>Data Type</th>\r\n                                <th>Add</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {dataTypeList}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n\r\n                <Jumbotron>\r\n                    <Form>\r\n                    <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                            <Form.Label column sm={3}>\r\n                            Seleted Data Type\r\n                            </Form.Label>\r\n                            <Col sm={5}>\r\n                                {selectedDataTypeInfo}\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                            <Form.Label column sm={3}>\r\n                            Start Date\r\n                            </Form.Label>\r\n                            <Col sm={5}>\r\n                                <Form.Control name=\"startDate\" type=\"date\"/>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                            <Form.Label column sm={3}>\r\n                            Start Date\r\n                            </Form.Label>\r\n                            <Col sm={5}>\r\n                                <Form.Control name=\"endDate\" type=\"date\"/>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                            <Col>\r\n                                <Button> Export Data</Button>\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Jumbotron>\r\n            </Container>\r\n          );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { ListGroup} from 'react-bootstrap'\r\n\r\n\r\nexport class UploadInfoItem extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            uploadInfo: null,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.setState(\r\n            {\r\n                uploadInfo: this.props.uploadInfo,\r\n            }\r\n        );\r\n    }\r\n    render(){\r\n        if(!this.state.uploadInfo)\r\n            return (<div></div>)\r\n        return (\r\n            <ListGroup.Item className=\"align-left\">\r\n                File Id: {this.state.uploadInfo.uploadId} Archive Path: {this.state.uploadInfo.archivePath} Upload Error: {this.state.uploadInfo.uploadError}\r\n            </ListGroup.Item>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {ListGroup} from 'react-bootstrap'\r\nimport { UploadInfoItem} from './UploadInfoItem'\r\n\r\nexport class UploadTaskItem extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            uploadTask: null,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.setState(\r\n            {\r\n                uploadTask: this.props.uploadTask,\r\n            }\r\n        );\r\n    }\r\n    render(){\r\n        if(!this.state.uploadTask)\r\n            return (<div></div>)\r\n        const uploadInfo = this.state.uploadTask.files.map(f => <UploadInfoItem uploadInfo={f} key={f.uploadId} />)\r\n        if(!this.state.uploadTask)\r\n            return (<div></div>)\r\n        return (\r\n            <ListGroup.Item>Upload Task Id: {this.state.uploadTask.taskId} File nums: {this.state.uploadTask.fileNum} Device Type: {this.state.uploadTask.deviceType}\r\n            <ListGroup>\r\n                {uploadInfo}\r\n            </ListGroup>\r\n          </ListGroup.Item>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Nav, ListGroup, Container} from 'react-bootstrap'\r\nimport {FileUploadApi} from '../api/FileUploadApi'\r\nimport {UploadInfoItem} from './UploadInfoItem'\r\nimport { UploadTaskItem } from './UploadTaskItem';\r\nexport class LogViewer extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {uploadTasks:[]}\r\n  }\r\n  componentDidMount(){\r\n    FileUploadApi.getAllUploadTasks()\r\n      .then(res=>{\r\n        this.setState({uploadTasks: res.data.data})\r\n      })\r\n      .catch(err=>{\r\n        console.log(err);\r\n      });\r\n  }\r\n  render(){\r\n    const uploadTasks = this.state.uploadTasks.map(ut => <UploadTaskItem  uploadTask = {ut} key={ut.taskId} />)\r\n    return (\r\n      <Container>\r\n          <Nav variant=\"tabs\" defaultActiveKey=\"processingError\">\r\n              <Nav.Item>\r\n                  <Nav.Link eventKey=\"processingError\">Processing Error</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                  <Nav.Link eventKey=\"incompletedUploadTasks\">Current Incompleted Upload Task</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                  <Nav.Link eventKey=\"processingTasks\" > Current Processing Tasks</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                  <Nav.Link eventKey=\"completedUploadTasks\" > Completed UploadTasks</Nav.Link>\r\n              </Nav.Item>\r\n          </Nav>\r\n          <ListGroup style={{textAlign:\"left\"}}>\r\n            {uploadTasks}\r\n          </ListGroup>\r\n      </Container>\r\n      );\r\n  }\r\n}\r\nexport default LogViewer;\r\n\r\n","import React from 'react';\r\nimport { Button, Navbar, Form, Nav, NavDropdown, Container } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {Route, HashRouter, Redirect } from 'react-router-dom'\r\nimport {FileUploadPanel} from './FileUploadPanel'\r\nimport {Dashboard} from './Dashboard'\r\nimport {DataManager} from './DataManager'\r\nimport {LogViewer} from './LogViewer'\r\n\r\nexport class Admin extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n  }\r\n  render(){\r\n    return (\r\n          <HashRouter>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n              <Navbar.Brand >Data Admin</Navbar.Brand>\r\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n              <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                  <LinkContainer to=\"/admin/dashboard\">\r\n                    <Nav.Link>Dashboard</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/admin/upload\">\r\n                    <Nav.Link>Upload Files</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/admin/dataManager\">\r\n                    <Nav.Link>Data Manager</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/admin/logViewer\">\r\n                    <Nav.Link>Log Viewer</Nav.Link>\r\n                  </LinkContainer>\r\n                </Nav>\r\n                <Form inline>\r\n                  \r\n                  <NavDropdown title=\"Hi, Technician1\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item href=\"#action/3.1\">My Upload</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.2\">Change Password</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.3\">Support</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#action/3.4\">Sign Out</NavDropdown.Item>\r\n                  </NavDropdown>\r\n                </Form>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n            <Container style={{paddingTop: 50}}>\r\n              <Redirect from=\"/admin\" exact to=\"/admin/dashboard\" />\r\n              <Route path=\"/admin/dashboard\" component={Dashboard}/>\r\n              <Route path=\"/admin/upload\" component={FileUploadPanel}/>\r\n              <Route path=\"/admin/dataManager\" component={DataManager}/>\r\n              <Route path=\"/admin/logViewer\" component={LogViewer}/>\r\n            </Container>\r\n          </HashRouter>\r\n    );\r\n  }\r\n}\r\n","import {BaseApi} from './BaseApi'\r\nimport axios from 'axios'\r\nimport sha1 from 'sha1'\r\nexport class AuthApi extends BaseApi{\r\n    static login(userName, password){\r\n        return axios.post(AuthApi.BASE_API_URL + 'auth/login', \r\n            {\r\n                userName: userName,\r\n                password: sha1(password)\r\n            }\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Redirect} from 'react-router-dom'\r\nimport {Form, Button, Container, Row, Col, Jumbotron} from 'react-bootstrap'\r\nimport {AuthApi} from '../api/AuthApi'\r\nexport class Login extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            userName:\"test\",\r\n            password:\"test\",\r\n            loginSuccess: false,\r\n            sessionToken: null\r\n        }\r\n        this.login = this.login.bind(this);\r\n    }\r\n    login(){\r\n        if( !this.state.userName || !this.state.password)\r\n        {\r\n            alert(\"Please type in both user name and password!\");\r\n            return;   \r\n        }\r\n        AuthApi.login(this.state.userName, this.state.password)\r\n            .then(res =>{\r\n                this.setState({loginSuccess:1, loginToken: res.data.data.sessionToken});\r\n            })\r\n            .catch(err =>{\r\n                console.log(err);\r\n            })\r\n\r\n    }\r\n    render(){\r\n        if(this.state.loginSuccess)\r\n        {\r\n            return <Redirect exact to=\"/admin/\" />\r\n        }\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col >\r\n                    <h2>Log In</h2>\r\n                    <Jumbotron style={{width: \"30em\", margin: \"0 auto\", top:\"50%\"}}>\r\n                        <Form>\r\n                            <Form.Group controlId=\"email\" style={{textAlign:\"left\"}}>\r\n                                <Form.Label>Email address</Form.Label>\r\n                                <Form.Control type=\"email\" \r\n                                    placeholder=\"Enter email\" \r\n                                    value={this.state.userName}\r\n                                    onChange={(e)=>{this.setState({userName: e.target.value})}}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"password\" style={{textAlign:\"left\"}}>\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                    value={this.state.password}\r\n                                    onChange={(e)=>{this.setState({password: e.target.value})}}\r\n                                />\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"button\" onClick={this.login}>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Redirect} from  'react-router-dom' \r\nimport {Admin} from './components/Admin'\r\nimport  {Login} from './components/Login'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <Redirect from=\"/\" exact to=\"/login\" />\r\n        <Route path=\"/admin\" component={Admin}/>\r\n        <Route path=\"/login\" component={Login}/>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}